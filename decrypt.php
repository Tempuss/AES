<?php

$key = ["B","O","B","?","!","0","0","0","0","0","0","0","0","0","0","0"];
$shift = [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]];

$sbox=[['63','7c','77','7b','f2','6b','6f','c5','30','01','67','2b','fe','d7','ab','76'],['ca','82','c9','7d','fa','59','47','f0','ad','d4','a2','af','9c','a4','72','c0'],['b7','fd','93','26','36','3f','f7','cc','34','a5','e5','f1','71','d8','31','15'],['04','c7','23','c3','18','96','05','9a','07','12','80','e2','eb','27','b2','75'],['09','83','2c','1a','1b','6e','5a','a0','52','3b','d6','b3','29','e3','2f','84'],['53','d1','00','ed','20','fc','b1','5b','6a','cb','be','39','4a','4c','58','cf'],['d0','ef','aa','fb','43','4d','33','85','45','f9','02','7f','50','3c','9f','a8'],['51','a3','40','8f','92','9d','38','f5','bc','b6','da','21','10','ff','f3','d2'],['cd','0c','13','ec','5f','97','44','17','c4','a7','7e','3d','64','5d','19','73'],['60','81','4f','dc','22','2a','90','88','46','ee','b8','14','de','5e','0b','db'],['e0','32','3a','0a','49','06','24','5c','c2','d3','ac','62','91','95','e4','79'],['e7','c8','37','6d','8d','d5','4e','a9','6c','56','f4','ea','65','7a','ae','08'],['ba','78','25','2e','1c','a6','b4','c6','e8','dd','74','1f','4b','bd','8b','8a'],['70','3e','b5','66','48','03','f6','0e','61','35','57','b9','86','c1','1d','9e'],['e1','f8','98','11','69','d9','8e','94','9b','1e','87','e9','ce','55','28','df'],['8c','a1','89','0d','bf','e6','42','68','41','99','2d','0f','b0','54','bb','16']];

//tbox ;; 너무 큼;;
require_once "json";


//key 문자 배열을 hex로 변환
for($i=0;$i<count($key);$i++)
{
    $key[$i] = dechex(ord($key[$i]));
}


echo "key";
echo "<br>";
echo json_encode($key);
echo "<br>";
echo "<br>";

//tbox[r][i][x] = sbox[x ^ roundKeys[r][i]];
//r은 round,i는 암호 key의 인덱스, x는 암호화할 문자열(첫번쨰는 0)
//이므로 tbox의 0,번째 배열의 2차워 배열들중 각 0번째 값을 뽑으면 암호화 키를 역산 할 수 있음
//key값 추출
//그리고 추출한 값이 sbox의 어떤 배열 index에 있는지 역산
$encrypted_key = [];
for($i=0;$i<16;$i++)
{
    $encrypted_key[$i] = searchSbox($tbox[0][$i][0], $sbox);
}

echo "Sbox Result Key";
echo "<br>";
echo json_encode($encrypted_key);
echo "<br>";
echo "<br>";
//["42","65","76","61","3f","57","74","21","73","56","42","38","44","4f","4d","71"]

//이렇게 뽑힌 값은 암호화할때 shfitRow과정을 거쳤기 때문에 거꾸로 역산을 해줘야 함
// 물론 이렇게 만든 후에 역산해야함
// +----+----+----+----+
// | 00 | 04 | 08 | 12 |
// +----+----+----+----+
// | 01 | 05 | 09 | 13 |
// +----+----+----+----+
// | 02 | 06 | 10 | 14 |
// +----+----+----+----+
// | 03 | 07 | 11 | 15 |
// +----+----+----+----+


echo "Key to Square"; 
printSQ(toSquare($encrypted_key));
// +----+----+----+----+
// | 42 | 3f | 73 | 44 |
// +----+----+----+----+
// | 65 | 57 | 56 | 4f |
// +----+----+----+----+
// | 76 | 74 | 42 | 4d |
// +----+----+----+----+
// | 61 | 21 | 38 | 71 |
// +----+----+----+----+


//shiftRow 역산 결과
echo "<br>";
echo "After Shift";
$shift = reverseShift(toSquare($encrypted_key));
printSQ($shift);
// +----+----+----+----+
// | 42 | 3f | 73 | 44 |
// +----+----+----+----+
// | 4f | 65 | 57 | 56 |
// +----+----+----+----+
// | 42 | 4d | 76 | 74 |
// +----+----+----+----+
// | 21 | 38 | 71 | 61 |
// +----+----+----+----+


//hex => 10진수로 변환
for($i=0;$i<4;$i++)
{
  for($j=0;$j<4;$j++)
  {
      $shift[$i][$j] = hexdec($shift[$i][$j]); 
  }
}

echo "<br>";
echo "To Dec";
printSQ($shift);
// +----+----+----+----+
// | 66 | 63 | 115| 68 |
// +----+----+----+----+
// | 79 | 101| 87 | 86 |
// +----+----+----+----+
// | 66 | 77 | 118|116 |
// +----+----+----+----+
// | 33 | 56 | 113| 97 |
// +----+----+----+----+


//10진수 -> string
for($i=0;$i<4;$i++)
{
  for($j=0;$j<4;$j++)
  {
      $shift[$i][$j] = chr($shift[$i][$j]); 
  }
}
echo "<br>";
echo "To String";
printSQ($shift);
// +----+----+----+----+
// | B  |  ? |  s |  D |
// +----+----+----+----+
// | O  |  e |  W |  V |
// +----+----+----+----+
// | B  |  M |  v |  t |
// +----+----+----+----+
// | !  |  8 |  q |  q |
// +----+----+----+----+


//Finish!
echo "<br>";
echo "<br>";
echo "Key Is : ";
for($i=0;$i<4;$i++)
{
  for($j=0;$j<4;$j++)
  {
      echo " ".$shift[$j][$i];
  }
}

function toSquare($key)
{
  $shift = [[0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]];

  for ($i=0;$i<4;$i++)
  {
      
      $shift[$i][0] = $key[4*0+$i];
      $shift[$i][1] = $key[4*1+$i];
      $shift[$i][2] = $key[4*2+$i];
      $shift[$i][3] = $key[4*3+$i];
  }
  return $shift;
}

function reverseShift($out)
{
  $tmp = 0;
  for ($i=1;$i<4;$i++)
  {
      for($j=0;$j<$i;$j++)
      {
          $out[$i] = rightShift($out[$i]); 
      }
  }
  return $out;
}

function rightShift($arr)
{
  $tmp = $arr[count($arr)-1];
  for($i=count($arr)-1;$i>0;$i--)
  {
    $arr[$i] = $arr[$i-1];  
  }
  $arr[0] = $tmp;

  return $arr;
}

function printSQ($data)
{
    echo "<br>";
    for($i=0;$i<4;$i++)
    {
        for($j=0;$j<4;$j++)
        {
            echo $data[$i][$j]." ";
        }
        echo "<br>";
    }
}

function searchSbox($key, $sbox)
{
    for($i=0;$i<16;$i++)
    {
        for($j=0;$j<16;$j++)
        {
            if ($key == $sbox[$i][$j])
            {
                return dechex($i).dechex($j);
            }
        }
    }
}


?>
